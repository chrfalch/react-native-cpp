import groovy.json.JsonSlurper

import java.nio.file.Paths

buildscript {
  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.2.1"
  }
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["Cpp_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["Cpp_" + name]).toInteger()
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  return (major == 7 && minor >= 3) || major >= 8
}

static def findNodeModules(baseDir) {
  def basePath = baseDir.toPath().normalize()
  // Node's module resolution algorithm searches up to the root directory,
  // after which the base path will be null
  while (basePath) {
    def nodeModulesPath = Paths.get(basePath.toString(), "node_modules")
    def reactNativePath = Paths.get(nodeModulesPath.toString(), "react-native")
    if (nodeModulesPath.toFile().exists() && reactNativePath.toFile().exists()) {
      return nodeModulesPath.toString()
    }
    basePath = basePath.getParent()
  }
  throw new GradleException("react-native-cpp: Failed to find node_modules/ path!")
}

def nodeModules = findNodeModules(projectDir)

static def generateIncludeFile(rootProject, project) {
  def basePath = rootProject.projectDir.toPath().normalize()

  // Path to the package.json file (one level up from NODE_MODULES_DIR)
  def packageJsonFile = rootProject.file("../package.json")

  // Read and parse package.json
  def packageJson = new JsonSlurper().parseText(packageJsonFile.text)

  // Delete/reset the generated include file
  def generated_include = new File(project.projectDir, 'react-native-cpp-includes.h')
  generated_include.delete()

  println("react-native-cpp: Generating ${generated_include.getPath()}")

  // Extract the list of files
  if (packageJson.nativeDependencies && packageJson.nativeDependencies.sources) {
    // Recreate the output header file
    generated_include.createNewFile()
    // Convert to full paths from project dir
    def include_files = packageJson.nativeDependencies.sources.collect { value ->
      return rootProject.file(value)
    }
    // Define set to create unique directories
    Set<Object> unique_dirs = new HashSet<>()
    Set<Object> cpp_files = new HashSet<>()

    // Write elements to the file
    include_files.each { file ->
      def pathBase = rootProject.projectDir.toPath()
      def pathAbsolute = file.toPath()
      String relativePath = pathBase.relativize(pathAbsolute)
      def includes = rootProject.fileTree(dir: "..", includes: [relativePath])
      includes.each { include ->
        String fileName = include.getName();
        String extension = "";
        int i = fileName.lastIndexOf('.');
        if (i >= 0) {
          extension = fileName.substring(i + 1);
        }
        if (extension == "h"|| extension == "hpp") {
          println("react-native-cpp: ${include}")
          generated_include.append("#import \"${fileName}\"\n") // Appends each element on a new line
        } else {
          cpp_files.add(include)
        }
        unique_dirs.add(include.parentFile.path)
      }
    }
    println("react-native-cpp: Generated react-native-cpp-includes.h")
    // Now let's return the unique directories we found
    println("react-native-cpp: Include directories ${unique_dirs.join(";")}")
    println("react-native-cpp: Cpp files ${cpp_files.join(";")}")
    return [unique_dirs.join(";"), cpp_files.join(";")]
  }
  return [".", ""]
}


def results = generateIncludeFile(rootProject, project)
def includeDirectories = results[0]
def cppFiles = results[1]

android {
  if (supportsNamespace()) {
    namespace "com.cpp"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
      }
    }
  }

  ndkVersion getExtOrDefault("ndkVersion")
  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()

    externalNativeBuild {
      cmake {
        arguments "-DANDROID_STL=c++_shared",
          "-DNODE_MODULES_DIR=${nodeModules}",
          "-DCPP_INCLUDE_DIRS=${includeDirectories}",
          "-DCPP_FILES=${cppFiles}",
          "-DIS_NEW_ARCHITECTURE_ENABLED=${isNewArchitectureEnabled()}"
        cppFlags "-O2 -frtti -fexceptions -Wall -fstack-protector-all"
        abiFilters "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
      }
    }
  }

  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
    }
  }

  packagingOptions {
    excludes = [
      "META-INF",
      "META-INF/**",
      "**/libc++_shared.so",
      "**/libjsi.so",
      "**/libreact_nativemodule_core.so",
    ]
  }

  buildFeatures {
    buildConfig true
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  buildFeatures {
    prefab true
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  sourceSets {
    main {
      if (isNewArchitectureEnabled()) {
        java.srcDirs += [
          "src/newarch",
          // This is needed to build Kotlin project with NewArch enabled
          "${project.buildDir}/generated/source/codegen/java"
        ]
      } else {
        java.srcDirs += ["src/oldarch"]
      }
    }
  }
}

repositories {
  mavenCentral()
  google()
}


dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
    libraryName = "Cpp"
    codegenJavaPackageName = "com.cpp"
  }
}
