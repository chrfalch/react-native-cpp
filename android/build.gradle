import groovy.json.JsonSlurper

import java.nio.file.Paths

buildscript {
  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.2.1"
  }
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["Cpp_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["Cpp_" + name]).toInteger()
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  return (major == 7 && minor >= 3) || major >= 8
}

static def findNodeModules(baseDir) {
  def basePath = baseDir.toPath().normalize()
  // Node's module resolution algorithm searches up to the root directory,
  // after which the base path will be null
  while (basePath) {
    def nodeModulesPath = Paths.get(basePath.toString(), "node_modules")
    def reactNativePath = Paths.get(nodeModulesPath.toString(), "react-native")
    if (nodeModulesPath.toFile().exists() && reactNativePath.toFile().exists()) {
      return nodeModulesPath.toString()
    }
    basePath = basePath.getParent()
  }
  throw new GradleException("RNCPP: Failed to find node_modules/ path!")
}

def nodeModulesDir = findNodeModules(rootProject.projectDir)
println("RNCPP: Node modules ${nodeModulesDir}")

static def extractBuildConfig(configFile,
                              generated_include,
                              unique_dirs,
                              cpp_files,
                              find_packages,
                              target_link_libraries,
                              rootProject) {
  def configJson = new JsonSlurper().parseText(configFile.text)
  if (!configJson.name) {
    throw new GradleException("RNCPP: The configuration file ${configFile.absolutePath} does not contain a name")
  }

  if (configJson.sources) {
    def sources = configJson.sources
    // Convert to full paths from project dir
    def include_files = sources.collect { value ->
      return rootProject.file(value)
    }

    // Write elements to the file
    include_files.each { file ->
      def pathBase = rootProject.projectDir.toPath()
      def pathAbsolute = file.toPath()
      String relativePath = pathBase.relativize(pathAbsolute)
      def includes = rootProject.fileTree(dir: "..", includes: [relativePath])
      includes.each { include ->
        String fileName = include.getName();
        String extension = "";
        int i = fileName.lastIndexOf('.');
        if (i >= 0) {
          extension = fileName.substring(i + 1);
        }
        if (extension == "h"|| extension == "hpp") {
          println("RNCPP: ${include}")
          generated_include.append("#import \"${fileName}\"\n") // Appends each element on a new line
        } else {
          cpp_files.add(include)
        }
        unique_dirs.add(include.parentFile.path)
      }
    }

    // Let's add additional settings

    // Look for include directories:
    if (configJson.android && configJson.android.includes) {
      def includes = configJson.android.includes
      if (includes.size() > 0) {
        includes.each { include ->
          unique_dirs.add(include)
        }
      }
    }
    // Look for packages to link with (prefab packages only for now)
    if (configJson.android && configJson.android.packages) {
      def packages = configJson.android.packages
      if (packages.size() > 0) {
        packages.each { p ->
          find_packages.add(p.find_package)
          target_link_libraries.add(p.target_link_library)
        }
      }
    }
  } else {
    println("RNCPP: Skipping ${configFile.absolutePath}, no source files present in config.")
  }
}

static def enumerateBuildConfigs(rootProject, project) {
  // Delete/reset the generated include file
  def generated_include = new File(project.projectDir, 'react-native-cpp-includes.h')
  generated_include.delete()

  def configurationFiles = rootProject.fileTree(dir: "..", includes: ['**/react-native-cpp.json'])
  if (configurationFiles.size() > 0) {
    // Recreate the output header file
    println("RNCPP: Generating ${generated_include.getPath()}")
    generated_include.createNewFile()

    // Define set to create unique directories
    Set<Object> unique_dirs = new HashSet<>()
    Set<Object> cpp_files = new HashSet<>()
    Set<Object> find_packages = new HashSet<>();
    Set<Object> target_link_libraries = new HashSet<>();

    println("RNCPP: Found ${configurationFiles.size()} configuration files.")
    configurationFiles.each { configFile ->
      // Process each file
      extractBuildConfig(configFile,
        generated_include, unique_dirs, cpp_files, find_packages,
        target_link_libraries, rootProject)
    }

    println("RNCPP: Generated react-native-cpp-includes.h")

    // Now let's return the unique directories we found
    println("RNCPP: Includes ${unique_dirs.join(";")}")
    println("RNCPP: Cpp files ${cpp_files.join(";")}")
    println("RNCPP: find_package ${find_packages.join(";")}")
    println("RNCPP: target_link_library ${target_link_libraries.join(";")}")

    return [unique_dirs.join(";"), cpp_files.join(";"), find_packages.join(";"), target_link_libraries.join(";")]
  }
  return [".", "", "", ""]
}

def results = enumerateBuildConfigs(rootProject, project)
def includeDirectories = results[0]
def cppFiles = results[1]
def find_packages = results[2]
def target_link_libraries = results[3]

def reactNativeArchitectures() {
  def value = project.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

android {
  if (supportsNamespace()) {
    namespace "com.cpp"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
      }
    }
  }

  ndkVersion getExtOrDefault("ndkVersion")
  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()

    externalNativeBuild {
      cmake {
        cppFlags "-frtti", "-fexceptions", "-Wall", "-fstack-protector-all", "-std=c++1y"
        abiFilters (*reactNativeArchitectures())
        arguments "-DANDROID_STL=c++_shared",
          "-DNODE_MODULES_DIR=${nodeModulesDir}",
          "-DCPP_FILES=${cppFiles}",
          "-DCPP_INCLUDE_DIRS=${includeDirectories}",
          "-DFIND_PACKAGES=${find_packages}",
          "-DTARGET_LINK_LIBRARIES=${target_link_libraries}"
          "-DIS_NEW_ARCHITECTURE_ENABLED=${isNewArchitectureEnabled()}"
      }
    }
  }

  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
    }
  }

  packagingOptions {
    excludes = [
      "META-INF",
      "META-INF/**",
      "**/libc++_shared.so",
      "**/libjsi.so",
      "**/libreact_nativemodule_core.so",
    ]
  }

  buildFeatures {
    buildConfig true
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  buildFeatures {
    prefab true
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  sourceSets {
    main {
      if (isNewArchitectureEnabled()) {
        java.srcDirs += [
          "src/newarch",
          // This is needed to build Kotlin project with NewArch enabled
          "${project.buildDir}/generated/source/codegen/java"
        ]
      } else {
        java.srcDirs += ["src/oldarch"]
      }
    }
  }
}

repositories {
  mavenCentral()
  google()
}


dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
    libraryName = "Cpp"
    codegenJavaPackageName = "com.cpp"
  }
}
